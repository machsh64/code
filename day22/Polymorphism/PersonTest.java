package day22.Polymorphism;

/**
 * @author : Ren
 * @Date : 2022/06/13/19:50
 * @Param :        面向对象特征之三： 多态性
 *             1.    理解多态性： 可以理解为一个事物的多种形态
 *
 *             2.    何为多态性:
 *                   对象的多态性: 父类的引用指向子类的对象(或子类的对象赋给父类的引用)
 *
 *             3.    多态的使用： 虚拟方法调用
 *                   有了对象的多态性以后， 我们在编译期， 只能调用父类中声明的方法， 但在运行期， 我们实际执行的时子类重写父类的方法。
 *                   总结： 编译， 看左边； 运行， 看右边。
 *
 *             4.     多态性的使用前提： ① 类的继承关系 ② 方法的重写
 *
 *             5.     对象的多态性, 只适用于方法, 不适用于属性 (编译和运行都看左边)
 */
public class PersonTest {
    public static void main(String[] args) {

        Person p1 = new Person();
        p1.eat();

        Man man = new Man();
        man.eat();            //人: 吃饭
        man.age = 25;
        man.earnMoney();      //男人多吃肉，长肌肉

        //**********************
        System.out.println("************************");
        //事物的多态性: 父类的引用指向子类的对象

        Person p2 = new Man();
        //多态的使用: 当调用子夫类同名同参数的方法时, 实际执行的是子类重写父类的方法 ---- 虚拟方法调用
        p2.eat();              //男人多吃肉，长肌肉
        p2.walk();             //男人霸气的走路

        //p2.earnMoney()          当引用子类特有的方法时, 出现了报错, 则说明只能调用父类中所具有的方法, 调用后的方法为子类中重写的方法

        System.out.println(p2.id);      //结果为父类中的 1001，可知在堆中， 属性的调用看的是左边的类

    }

}
